{"remainingRequest":"/Users/mac/Desktop/vue-template/vue3-typescript-template/node_modules/babel-loader/lib/index.js!/Users/mac/Desktop/vue-template/vue3-typescript-template/node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!/Users/mac/Desktop/vue-template/vue3-typescript-template/src/store/index.ts","dependencies":[{"path":"/Users/mac/Desktop/vue-template/vue3-typescript-template/src/store/index.ts","mtime":1628838454686},{"path":"/Users/mac/Desktop/vue-template/vue3-typescript-template/node_modules/cache-loader/dist/cjs.js","mtime":1618564461767},{"path":"/Users/mac/Desktop/vue-template/vue3-typescript-template/node_modules/babel-loader/lib/index.js","mtime":1618564461759},{"path":"/Users/mac/Desktop/vue-template/vue3-typescript-template/node_modules/ts-loader/index.js","mtime":1626082511152}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlU3RvcmUsIHVzZVN0b3JlIGFzIGJhc2VVc2VTdG9yZSB9IGZyb20gJ3Z1ZXgnOwppbXBvcnQgc3RhdGUgZnJvbSAnLi9zdGF0ZSc7CmltcG9ydCBtdXRhdGlvbnMgZnJvbSAnLi9tdXRhdGlvbnMnOwppbXBvcnQgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnOwpleHBvcnQgY29uc3Qga2V5ID0gU3ltYm9sKCk7CmV4cG9ydCBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHsKICBzdGF0ZSwKICBtdXRhdGlvbnMsCiAgYWN0aW9ucywKICBtb2R1bGVzOiB7fQp9KTsgLy8gZGVmaW5lIHlvdXIgb3duIGB1c2VTdG9yZWAgY29tcG9zaXRpb24gZnVuY3Rpb24KCmV4cG9ydCBmdW5jdGlvbiB1c2VTdG9yZSgpIHsKICByZXR1cm4gYmFzZVVzZVN0b3JlKGtleSk7Cn0="},{"version":3,"sources":["/Users/mac/Desktop/vue-template/vue3-typescript-template/src/store/index.ts"],"names":[],"mappings":"AAEA,SAAS,WAAT,EAAsB,QAAQ,IAAI,YAAlC,QAA6D,MAA7D;AAEA,OAAO,KAAP,MAAkB,SAAlB;AACA,OAAO,SAAP,MAAsB,aAAtB;AACA,OAAO,OAAP,MAAoB,WAApB;AAEA,OAAO,MAAM,GAAG,GAA+B,MAAM,EAA9C;AACP,OAAO,MAAM,KAAK,GAAG,WAAW,CAAC;AAC/B,EAAA,KAD+B;AAE/B,EAAA,SAF+B;AAG/B,EAAA,OAH+B;AAI/B,EAAA,OAAO,EAAE;AAJsB,CAAD,CAAzB,C,CASP;;AACA,OAAM,SAAU,QAAV,GAAkB;AACtB,SAAO,YAAY,CAAC,GAAD,CAAnB;AACD","sourcesContent":["\nimport { InjectionKey } from 'vue'\nimport { createStore, useStore as baseUseStore, Store } from 'vuex'\nimport { State } from './state'\nimport state from './state'\nimport mutations from './mutations'\nimport actions from './actions'\n\nexport const key: InjectionKey<Store<State>> = Symbol()\nexport const store = createStore({\n  state,\n  mutations,\n  actions,\n  modules: {}\n})\n\n\n\n// define your own `useStore` composition function\nexport function useStore() {\n  return baseUseStore(key)\n}\n"],"sourceRoot":""}]}